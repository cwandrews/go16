* Golang 1.6
[[./img/Go_release_party_1.6_wide.png]]
* About Me
Charlie Andrews

[[https://github.com/cwandrews][Github]]
[[https://twitter.com/cwndrws][Twitter]]
* Umbel
Thanks to Umbel for sponsoring this Meetup.

Open Positions:
- Platform Engineer
- Cassandra Database Engineer
- Front End Developer

Checkout the [[https://www.umbel.com/engineering/][Umbel engineering page]] to see the latest open positions.
* Slides
These slides are available on [[https://github.com/cwandrews/go16][github]].
* Go 1.6
- The latest Go Release, version 1.6, arrives six months after 1.5.
- Most of its changes are in the implementation of the language,
  runtime, and libraries. There are no changes to the language
  specification.
- As always, the release maintains the [[http://tip.golang.org/doc/go1compat.html][Go 1 compatibility guarantee]].
- Almost all Go programs are expected to continue to compile and run
  as before.
* History of Go releases
Go was announced as an open source project November 10th, 2009.

Releases occur on a ~6 month cadence with several bug fix point
releases between each major release.

Release timeline:
- Go 1.0 released 28th March, 2012
- Go 1.1 released 13th May, 2013
- Go 1.2 released 1st December, 2013
- Go 1.3 released 18th June, 2014
- Go 1.4 released 10th December, 2014
- Go 1.5 released 19th August, 2015
- Go 1.6 released earlier this afternoon (17th February, 2016)
* What's new?
- Changes to the Language
- Ports
- Improved Garbage Collector
- HTTP/2
- Template
- Sort Performance
- Detection of Concurrent Map Access
- Vendoring
- Panic Messages
* Changes to the Language
_NONE_
* Ports
- Go 1.6 adds experimental ports to Linux on 64-bit MIPS (linux/mips64
  and linux/mips64le). These ports support cgo but only with internal
  linking.
- Go 1.6 also adds an experimental port to Android on 32-bit x86
  (android/386).
- On FreeBSD, Go 1.6 defaults to using clang, not gcc, as the external
  C compiler.
- On Linux on little-endian 64-bit PowerPC (linux/ppc64le), Go 1.6 now
  supports cgo with external linking and is roughly feature complete.
- On NaCl, Go 1.5 required SDK version pepper-41. Go 1.6 adds support
  for later SDK versions.
* Improved Garbage Collector
- Go 1.5 introduced a low latency garbage collector.
- The new collector trades throughput for reduced latency.
- Allocations pay (in terms of time) a little up front to reduce the
  time taken to clean up later, this reduces the overall time the gc
  has to stop the world.
- For Go 1.6, a lot of work went into optimising and tuning the gc,
  enabling far larger heaps to be managed within the 10ms latency
  goal.
- [[http://www.infoq.com/presentations/go-gc-performance][here]] is a talk by Rick Hudson about the improvements to the garbage
  collector between 1.5 and 1.6
* HTTP/2
- Go 1.6 adds transparent support in the net/http package for the new
  HTTP/2 protocol.
- Go clients and servers will automatically use HTTP/2 as appropriate
  when using HTTPS.
- Programs that must disable HTTP/2 can do so by setting
  Transport.TLSNextProto (for clients) or Server.TLSNextProto (for
  servers) to a non-nil, empty map.
- Read more
  - HTTP/2 demo site (powered by Go)
  - Here is a video of Brad Fitzpatrick giving an overview of Go 1.6's
    HTTP/2 support at the London Go Gathering in 2015.
* Template
- Whitespace Stripping
- Block Action
* Template (Whitespace Stripping)
- It is now possible to trim spaces around template actions, which can
  make template definitions more readable.
- A minus sign at the beginning of an action says to trim space before
  the action, and a minus sign at the end of an action says to trim
  space after the action.
- [[./whitespace_stripping/main.go][example]]
* Template (Block Action)
- The new {{block}} action, combined with allowing redefinition of
  named templates, provides a simple way to define pieces of a
  template that can be replaced in different instantiations.
 - For example, the template below defines the basic formatting of a
   web page:
#+BEGIN_SRC 
<title>{{block "title"}}Page Title{{end}}</title>
<body>
<h1>{{template "title"}}</h1>
{{block "page"}}Main text{{end}}
#+END_SRC
- A program can then overlay that template with new definitions for
  the "title" and "page" blocks to reuse the formatting for another
  page.
- [[./template_blocks/main.go][example]]
* Sort Performance
- In the sort package, the implementation of Sort has been rewritten
  to make about 10% fewer calls to the Interface's Less and Swap
  methods.
- The new algorithm does choose a different ordering than before for
  values that compare equal (those pairs for which Less(i, j) and
  Less(j, i) are false).
- The definition of Sort makes no guarantee about the final order of
  equal values, the new behavior may break programs that expect a
  specific order.
- Such programs should either refine their Less implementations to
  report the desired order or should switch to sort.Stable, which
  preserves the original input order of equal values.
- [[./sort_performance/main.go][example]]
* Detection of Concurrent Map Access
- The runtime has added lightweight, best-effort detection of
  concurrent misuse of maps.
- If the runtime detects this condition, it prints a diagnosis and
  crashes the program.
 #+BEGIN_SRC sh
fatal error: concurrent map writes

goroutine 2726 [running]:
runtime.throw(0x192d630, 0x15)
    /usr/lib/go/src/runtime/panic.go:530 +0x90 fp=0xc8202eb838 sp=0xc8202eb820
#+END_SRC
- The best way to find out more about the problem is to run the
  program under the race detector.
- [[./concurrent_map_access/main.go][example]]
* Vendoring
- Go 1.5 introduced experimental support for vendoring, enabled by
  setting the GO15VENDOREXPERIMENT environment variable to 1
- Go 1.6 keeps the vendoring support, no longer considered
  experimental, and enables it by default.
- It can be disabled explicitly by setting the GO15VENDOREXPERIMENT
  environment variable to 0. Go 1.7 will remove support for the
  environment variable.
- The most likely problem caused by enabling vendoring by default
  happens in source trees containing an existing directory named
  vendor that does not expect to be interpreted according to new
  vendoring semantics. In this case, the simplest fix is to rename the
  directory to anything other than vendor and update any affected
  import paths.
* Panic Messages
- For program-ending panics, the runtime now by default prints only
  the stack of the running goroutine, not all existing goroutines.
- Usually only the current goroutine is relevant to a panic, so
  omitting the others significantly reduces irrelevant output in a
  crash message.
- To see the stacks from all goroutines in crash messages, set the
   environment variable GOTRACEBACK to all or call debug.SetTraceback
  before the crash, and rerun the program.
#+BEGIN_SRC sh
env GOTRACEBACK=all ./crashy
#+END_SRC
- Read more:
  - [[http://dave.cheney.net/2015/11/29/a-whirlwind-tour-of-gos-runtime-environment-variables#GOTRACEBACK][A whirlwind tour of Goâ€™s runtime environment variables]]
- [[./short_panic/main.go][example]]
